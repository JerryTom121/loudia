#! /usr/bin/env python
# encoding: utf-8
# Ricard Marxer 2008

import Options
import os, os.path

LIBNAME = 'loudia'
LIBVERSION = '0.1-dev'

def set_options(opt):
	opt.tool_options('compiler_cxx')

        opt.sub_options('swig')
        opt.sub_options('tests')

def pkgconf(lib, what = '--cflags'):
        return os.popen('pkg-config %s %s' % (lib, what)).read().strip()


def configure(conf):
	conf.check_tool('compiler_cxx')
        conf.check_cfg(atleast_pkgconfig_version='0.0.0')
        conf.check_cfg(package='fftw3 fftw3f fftw3l', uselib_store='FFTW3', errmsg='FFTW not found. No FFT support.')

        conf.env.append_value('LINKFLAGS_FFTW3', '-lfftw3 -lfftw3f -lfftw3l')

        """
	conf.check_cc(fragment='''extern "C" {
        #ifndef __STDC_CONSTANT_MACROS
        #define __STDC_CONSTANT_MACROS
        #endif
        #include <libavcodec/avcodec.h>
        #include <libavformat/avformat.h>
        }

        int main() { printf("1"); return 1; } ''',
                      define_name='HAVE_FFMPEG_H',
                      define_ret='1',
                      execute='1',
                      msg='Checking for ffmpeg',
                      okmsg= 'ok',
                      errmsg='FFMPEG not found. No audio loading support.')
        """

        conf.env.append_value('CPPFLAGS_FFMPEG', pkgconf('libavcodec'))
        conf.env.append_value('LINKFLAGS_FFMPEG', pkgconf('libavcodec', '--libs'))
        conf.env.append_value('LINKFLAGS_FFMPEG', pkgconf('libavformat', '--libs'))

        conf.check_cfg(package='samplerate', uselib_store='SAMPLERATE', mandatory=True)
        conf.env.append_value('LINKFLAGS_SAMPLERATE', '-lsamplerate')

        conf.env.append_value('CPPPATH_EIGEN', os.environ['CPPPATH_EIGEN'])

        if conf.env['option_debug']:
                conf.env.append_value('CXXFLAGS', '-g')
                conf.env.append_value('CXXFLAGS','-fno-inline')
                conf.env.append_value('CXXFLAGS','-W')
                conf.env.append_value('CXXFLAGS','-Wall')
        else:
                conf.env.append_value('CXXFLAGS', '-O4')
                conf.env.append_value('CXXFLAGS','-fPIC')
                conf.env.append_value('CXXFLAGS','-W')
                conf.env.append_value('CXXFLAGS','-Wall')
                conf.env.append_value('CXXFLAGS','-msse2')
                conf.env.append_value('CXXFLAGS','-DNDEBUG')
        conf.env.append_value('LINKFLAGS', '-lm')

        if not conf.env['option_no_python_bindings']:
                conf.sub_config('swig')

        if conf.env['option_cpptests']:
                conf.sub_config('tests')

def build(bld):
        obj = bld.new_task_gen(
                features = 'cxx cshlib',
                uselib = 'FFTW3 FFMPEG SAMPLERATE EIGEN',
                target = LIBNAME,
                export_incdirs = '.',
                includes = '.',
                name         = LIBNAME,
                vnum         = LIBVERSION
        )

	obj.find_sources_in_dirs('.', exts=['.cpp'])

        if not bld.env['option_no_python_bindings']:
                bld.add_subdirs('swig')

        if bld.env['option_cpptests']:
                bld.add_subdirs('tests')

        if bld.env['option_old_ffmpeg']:
                bld.env.append_value('CPPFLAGS', '-DLOUDIA_OLD_FFMPEG')

        bld.install_files('${PREFIX}/include/loudia', '*.h')
